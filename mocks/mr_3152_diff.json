[
  {
    "diff": "@@ -405,7 +405,6 @@\n \t\t\u003c!--menuref id=\"Arcade\" grayedif=\"!system.isarcade\" /--\u003e\n \t\t\u003citem id=\"DecorateGames\" caption=\"DECORATIONS\" help=\"Select what kind of information you want to see on the right of your gamelist: regions flags, players or game genre.\" /\u003e\n \t\t\u003citem id=\"HighlightRegion\" caption=\"HIGHLIGHT GAMES OF REGION...\" help=\"Select a region to filter out games not matching the selected region.\" /\u003e\n-\t\t\u003citem id=\"AliasPreferredRegion\" caption=\"ALIAS PREFERRED REGION\" help=\"Choose you region for display aliases\" /\u003e\n \t\t\u003citem id=\"FlattenFolders\" caption=\"FLATTEN FOLDERS\" grayedif=\"system.isalwaysflat\" help=\"Switch between seeing the folders structure and seeing all games in a flatten top level.\" grayedHelp=\"This system is either always flattened or cannot be flattened!\" /\u003e\n \t\t\u003citem id=\"ShowOnlyFavorites\" caption=\"SHOW ONLY FAVORITES\" grayedif=\"system.isfavorites\" help=\"Switch between seing or not only the favorites games. To add a game in the favorite list, select the game and toggle its state using 'Y'.\" grayedHelp=\"You can't hide favorites in the Favorite system!\" /\u003e\n \t\t\u003citem id=\"ShowFavoriteFirst\" caption=\"FAVORITES FIRST\" grayedif=\"system.isfavorites or system.isarcade\" help=\"Display favorites at the top of gamelists.\" grayedHelp=\"Favorites are always fist in the Favorite system!\" /\u003e\n",
    "new_path": "projects/frontend/data/resources/menu.xml",
    "old_path": "projects/frontend/data/resources/menu.xml",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -89,9 +89,6 @@ class FileData\n     //! Metadata\n     MetadataDescriptor mMetadata;\n \n-    bool mHasOtherVersions = false;\n-    String mWantedAliasRegion = \"ss\";\n-\n   public:\n     //! Type for mass locking\n     typedef HashSet\u003cFolderData*\u003e LockedOnce;\n@@ -131,8 +128,6 @@ class FileData\n     [[nodiscard]] bool IsFolderOnly() const { return mType == ItemType::Folder; }\n     [[nodiscard]] bool IsRoot() const { return mType == ItemType::Root; }\n     [[nodiscard]] bool IsTopMostRoot() const { return mType == ItemType::Root \u0026\u0026 mParent == nullptr; }\n-    [[nodiscard]] bool HasOtherVersion() const { return mHasOtherVersions ; }\n-    [[nodiscard]] String GetWantedAliasRegion() const { return mWantedAliasRegion ; }\n \n     /*\n      * Setters\n@@ -144,8 +139,6 @@ class FileData\n      */\n     void SetParent(FolderData* parent) { mParent = parent; }\n \n-    void SetHasOtherVersions(bool hasOtherVersions) { mHasOtherVersions = hasOtherVersions; }\n-    void SetWantedAliasRegion(String wantedAliasRegion) { mWantedAliasRegion = wantedAliasRegion; }\n     /*!\n      * Get Thumbnail path if there is one, or Image path.\n      * @return file path (may be empty)\n",
    "new_path": "projects/frontend/es-app/src/games/FileData.h",
    "old_path": "projects/frontend/es-app/src/games/FileData.h",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -11,8 +11,6 @@ void FileSorts::Initialize()\n   mAllSorts.clear();\n   mAllSorts.push_back(SortType(Sorts::FileNameAscending      , \u0026compareFileName     , \u0026compareFileNameArcade     , true , \"\\uF15d \" + _(\"NAME\")));\n   mAllSorts.push_back(SortType(Sorts::FileNameDescending     , \u0026compareFileName     , \u0026compareFileNameArcade     , false, \"\\uF15e \" + _(\"NAME\")));\n-  mAllSorts.push_back(SortType(Sorts::AliasAscending         , \u0026compareAlias        , \u0026compareFileNameArcade     , true , \"\\uF15d \" + _(\"ALIAS\")));\n-  mAllSorts.push_back(SortType(Sorts::AliasDescending        , \u0026compareAlias        , \u0026compareFileNameArcade     , false, \"\\uF15e \" + _(\"ALIAS\")));\n   mAllSorts.push_back(SortType(Sorts::RatingAscending        , \u0026compareRating       , \u0026compareRatingArcade       , true , \"\\uF165 \" + _(\"RATING\")));\n   mAllSorts.push_back(SortType(Sorts::RatingDescending       , \u0026compareRating       , \u0026compareRatingArcade       , false, \"\\uF164 \" + _(\"RATING\")));\n   mAllSorts.push_back(SortType(Sorts::PlayCountAscending     , \u0026comparePlayCount    , \u0026comparePlayCountArcade    , true , \"\\uF162 \" + _(\"TIMES PLAYED\")));\n@@ -170,16 +168,7 @@ ImplementSortMethod(compareDevelopper)\n   CheckFoldersAndGames(file1, file2)\n   int result = unicodeCompareUppercase(file1.Metadata().Developer().Trim(), file2.Metadata().Developer().Trim());\n   if (result != 0) return result;\n-  return unicodeCompareUppercase(file1.Name(), file2.Name());\n-}\n-\n-ImplementSortMethod(compareAlias)\n-{\n-  CheckFoldersAndGames(file1, file2)\n-  int result = unicodeCompareUppercase(file1.HasOtherVersion() ? file1.Metadata().AliasOrName(file1.GetWantedAliasRegion()).Trim() : file1.Name(),\n-                                       file2.HasOtherVersion() ? file2.Metadata().AliasOrName(file2.GetWantedAliasRegion()).Trim() : file2.Name());\n-  if (result != 0) return result;\n-  return unicodeCompareUppercase(file1.Name(), file2.Name());\n+  return compareFileName(file1, file2);\n }\n \n ImplementSortMethod(comparePublisher)\n@@ -248,8 +237,6 @@ const FileSorts::SortList\u0026 FileSorts::AvailableSorts(SortSets set)\n       {\n         Sorts::FileNameAscending,\n         Sorts::FileNameDescending,\n-        Sorts::AliasAscending,\n-        Sorts::AliasDescending,\n         Sorts::SystemAscending,\n         Sorts::SystemDescending,\n         Sorts::GenreAscending,\n@@ -314,8 +301,6 @@ const FileSorts::SortList\u0026 FileSorts::AvailableSorts(SortSets set)\n   {\n     Sorts::FileNameAscending,\n     Sorts::FileNameDescending,\n-    Sorts::AliasAscending,\n-    Sorts::AliasDescending,\n     Sorts::GenreAscending,\n     Sorts::GenreDescending,\n     Sorts::RatingAscending,\n",
    "new_path": "projects/frontend/es-app/src/games/FileSorts.cpp",
    "old_path": "projects/frontend/es-app/src/games/FileSorts.cpp",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -5,6 +5,7 @@\n #include \u003csystems/arcade/ArcadeTupple.h\u003e\n #include \u003cutils/cplusplus/StaticLifeCycleControler.h\u003e\n #include \u003cutils/cplusplus/INoCopy.h\u003e\n+#include \"games/classifications/Regions.h\"\n \n class FileSorts : public StaticLifeCycleControler\u003cFileSorts\u003e\n {\n@@ -36,8 +37,6 @@ class FileSorts : public StaticLifeCycleControler\u003cFileSorts\u003e\n       PlayersDescending,       //!\u003c By number of players then by filename, 2-1\n       DeveloperAscending,      //!\u003c By developer then by filename, A-Z\n       DeveloperDescending,     //!\u003c By developer then by filename, Z-A\n-      AliasAscending,          //!\u003c By alias then by filename, A-Z\n-      AliasDescending,         //!\u003c By alias then by filename, Z-A\n       PublisherAscending,      //!\u003c By publisher then by filename, A-Z\n       PublisherDescending,     //!\u003c By publisher then by filename, Z-A\n       GenreAscending,          //!\u003c By normalized genre (genreid) then by filename, EnumFirst-EnumLast\n@@ -149,7 +148,6 @@ class FileSorts : public StaticLifeCycleControler\u003cFileSorts\u003e\n     DeclareSortMethodPrototype(compareLastPlayed)\n     DeclareSortMethodPrototype(compareNumberPlayers)\n     DeclareSortMethodPrototype(compareDevelopper)\n-    DeclareSortMethodPrototype(compareAlias)\n     DeclareSortMethodPrototype(comparePublisher)\n     DeclareSortMethodPrototype(compareGenre)\n     DeclareSortMethodPrototype(compareReleaseDate)\n",
    "new_path": "projects/frontend/es-app/src/games/FileSorts.h",
    "old_path": "projects/frontend/es-app/src/games/FileSorts.h",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -8,4 +8,5 @@ enum class ItemType : char\n   Root,\n   Empty,\n   Header,\n+  AliasHeader,\n };\n",
    "new_path": "projects/frontend/es-app/src/games/ItemType.h",
    "old_path": "projects/frontend/es-app/src/games/ItemType.h",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -552,35 +552,16 @@ class MetadataDescriptor\n     [[nodiscard]] String TotalPlayTimeAsString()  const { return String(mTotalPlayTime);                        }\n     [[nodiscard]] String LightgunLuminosityAsString()  const { return String(mLightgunLuminosity);                        }\n \n-    [[nodiscard]] String AliasOrName(const String\u0026 region) const\n-    {\n-      if (!Aliases().empty())\n-      {\n-        for (auto\u0026 alias: Aliases().Split('|'))\n-        {\n-          String search = \"(\";\n-          search.Append(region).Append(\")\");\n-\n-          if (alias.Contains(search))\n-            return alias.SubString(0, alias.Count() - 4);\n-        }\n-    }\n-\n-      return MainAliasOrName();\n-    }\n-\n-    [[nodiscard]] String MainAliasOrName() const\n-    {\n-      if (!Aliases().empty())\n-      {\n-        int pos =Aliases().Find(\"|\");\n-        String alias = Aliases().SubString(0, pos);\n-        return alias.SubString(0, alias.Count() - 4);\n+    [[nodiscard]] String MainAliasOrName() const {\n+      String aliases = Aliases();\n+      if (!aliases.empty()) {\n+        int pos = aliases.Find(\"|\");\n+        String alias = aliases.SubString(0, pos);\n+        return alias.SubString(0, alias.size()-4);\n       }\n       return Name();\n     }\n \n-\n     /*\n      * Setters\n      */\n",
    "new_path": "projects/frontend/es-app/src/games/MetadataDescriptor.h",
    "old_path": "projects/frontend/es-app/src/games/MetadataDescriptor.h",
    "a_mode": "100755",
    "b_mode": "100755",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -762,7 +762,6 @@ void MenuBuilder::AddItem(const InheritableContext\u0026 context, const ItemDefinitio\n     case MenuItemType::HighlightRegion: { AddList\u003cRegions::GameRegions\u003e(context, item, MenuDataProvider::GetRegionEntries(*Context().System()), Regions::Clamp(mConf.GetSystemRegionFilter(*Context().System())), Regions::GameRegions::Unknown, defaultGrayed); break; }\n     case MenuItemType::SearchOtherVersions: { AddAction(context, item, true, defaultGrayed); break; }\n     case MenuItemType::SearchByLicence: { AddAction(context, item, true, defaultGrayed); break; }\n-    case MenuItemType::AliasRegionPreferred: { AddList\u003cRegions::GameRegions\u003e(context, item, MenuDataProvider::GetRegionEntries(*Context().System()), Regions::Clamp(mConf.GetSystemAliasPreferredRegion(*Context().System())), Regions::GameRegions::Unknown, defaultGrayed); break; }\n     case MenuItemType::RunSaveStates: { AddAction(context, item, true, defaultGrayed); break; }\n     case MenuItemType::SetGameToBootOn: { AddSwitch(context, item, Context().Game()-\u003eRomPath().ToString() == mConf.GetAutorunGamePath(), defaultGrayed); break; }\n     case MenuItemType::DeleteGame: { AddAction(context, item, true, defaultGrayed); break; }\n",
    "new_path": "projects/frontend/es-app/src/guis/menus/MenuBuilder.cpp",
    "old_path": "projects/frontend/es-app/src/guis/menus/MenuBuilder.cpp",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -255,7 +255,6 @@ static const HashMap\u003cString, MenuItemType\u003e sStringToItemType\n   { \"SortGames\",                    MenuItemType::SortGames },\n   { \"DecorateGames\",                MenuItemType::DecorateGames },\n   { \"HighlightRegion\",              MenuItemType::HighlightRegion },\n-  { \"AliasPreferredRegion\",         MenuItemType::AliasRegionPreferred },\n   { \"RunSaveStates\",                MenuItemType::RunSaveStates },\n   { \"SetGameToBootOn\",              MenuItemType::SetGameToBootOn },\n   { \"DeleteGame\",                   MenuItemType::DeleteGame },\n",
    "new_path": "projects/frontend/es-app/src/guis/menus/MenuItemType.cpp",
    "old_path": "projects/frontend/es-app/src/guis/menus/MenuItemType.cpp",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -255,7 +255,6 @@ enum class MenuItemType\n   SortGames,\n   DecorateGames,\n   HighlightRegion,\n-  AliasRegionPreferred,\n   RunSaveStates,\n   SetGameToBootOn,\n   DeleteGame,\n",
    "new_path": "projects/frontend/es-app/src/guis/menus/MenuItemType.h",
    "old_path": "projects/frontend/es-app/src/guis/menus/MenuItemType.h",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -933,7 +933,6 @@ void MenuProvider::MenuSingleChanged(ItemSelectorBase\u003cRegions::GameRegions\u003e\u0026 ite\n   {\n     case MenuItemType::ScrapeOptionRegionFavorite: mConf.SetScreenScraperRegion(value).Save(); break;\n     case MenuItemType::HighlightRegion: assert(item.Context().HasSystem() \u0026\u0026 \"No system context\"); mConf.SetSystemRegionFilter(*item.Context().System(), value).Save(); break;\n-    case MenuItemType::AliasRegionPreferred: assert(item.Context().HasSystem() \u0026\u0026 \"No system context\"); mConf.SetSystemAliasPreferredRegion(*item.Context().System(), value).Save(); break;\n     default:\n       mWindow.displayMessage(\"[MenuProcessor] Unprocessed id \" + MenuConverters::ItemToString((MenuItemType)id) + \" in MenuSingleChanged\u003cRegions::GameRegions\u003e !\");\n   }\n",
    "new_path": "projects/frontend/es-app/src/guis/menus/MenuProvider.cpp",
    "old_path": "projects/frontend/es-app/src/guis/menus/MenuProvider.cpp",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -373,11 +373,12 @@ void GuiSearch::PopulateGrid(const String\u0026 search)\n       mText-\u003esetValue(\"\");\n       ComponentListRow row;\n       std::shared_ptr\u003cComponent\u003e ed;\n+      bool displayByFileName = RecalboxConf::Instance().GetDisplayByFileName();\n       for (auto *game : mSearchResults)\n       {\n         row.Clear();\n         String gameName(game-\u003eSystem().Descriptor().IconPrefix());\n-        gameName.Append(game-\u003eMetadata().Name());\n+        gameName.Append(displayByFileName ? game-\u003eMetadata().RomFileOnly().FilenameWithoutExtension() : game-\u003eName());\n \n         ed = std::make_shared\u003cTextComponent\u003e(mWindow, gameName, mMenuTheme.Text().font,\n                                              mMenuTheme.Text().color,\n@@ -428,7 +429,8 @@ void GuiSearch::populateGridMeta(int i)\n   mResultThumbnail-\u003esetImage(mSearchResults[i]-\u003eMetadata().Image());\n   mResultThumbnail-\u003esetResize(mGridMeta-\u003egetColWidth(2) * 0.9f, mGridMeta-\u003egetRowHeight(1)*0.9f);\n   mResultThumbnail-\u003esetKeepRatio(true);\n-  mResultVideo-\u003esetVideo(mSearchResults[i]-\u003eMetadata().Video(), 2000, 1);\n+  // todo asap fix playing video if video was playing already in gamelistView\n+  //mResultVideo-\u003esetVideo(mSearchResults[i]-\u003eMetadata().Video(), 2000, 1);\n   mResultVideo-\u003esetResize(mGridMeta-\u003egetColWidth(2) * 0.9f, mGridMeta-\u003egetRowHeight(1)*0.9f);\n   mResultVideo-\u003esetKeepRatio(true);\n \n",
    "new_path": "projects/frontend/es-app/src/guis/GuiSearch.cpp",
    "old_path": "projects/frontend/es-app/src/guis/GuiSearch.cpp",
    "a_mode": "100755",
    "b_mode": "100755",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -154,19 +154,25 @@ void ScreenScraperApis::DeserializeGameInformationInner(const rapidjson::Value\u0026\n   if (json.HasMember(\"familles\"))\n   {\n     String families;\n+    HashSet\u003cString\u003e familiesSet;\n     for(const auto\u0026 famille : json[\"familles\"].GetArray())\n     {\n       if (famille.HasMember(\"noms\"))\n         for (const auto\u0026 nom: famille[\"noms\"].GetArray())\n           if (nom.HasMember(\"text\"))\n           {\n-            if (!families.empty())\n-              families.Append(\" | \");\n-            families.Append(nom[\"text\"].GetString());\n+            familiesSet.insert(nom[\"text\"].GetString());\n           }\n+    }\n \n-      game.mLicences = families;\n+    for (auto\u0026 family : familiesSet)\n+    {\n+      if (!families.empty())\n+        families.Append(\" | \");\n+      families.Append(family);\n     }\n+\n+    game.mLicences = families;\n   }\n \n   if (json.HasMember(\"synopsis\"))\n",
    "new_path": "projects/frontend/es-app/src/scraping/scrapers/screenscraper/ScreenScraperApis.cpp",
    "old_path": "projects/frontend/es-app/src/scraping/scrapers/screenscraper/ScreenScraperApis.cpp",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -388,6 +388,7 @@ void DetailedGameListView::DoUpdateGameInformation(bool update)\n   else\n   {\n     const bool isFolder = file-\u003eIsFolder();\n+    const bool isHeader = file-\u003eIsHeader();\n     const bool hasImage = !file-\u003eMetadata().Image().IsEmpty();\n \n     if (hasImage \u0026\u0026 isFolder)\n@@ -401,13 +402,23 @@ void DetailedGameListView::DoUpdateGameInformation(bool update)\n     }\n     else\n     {\n-       if (isFolder)\n+       if (isHeader)\n        {\n          setRegions(nullptr); // No region for folders\n          MoveToFadeIn(getFolderComponents());\n          MoveToFadeOut(getGameComponents());\n \n-         if (file != mLastCursorItem) ViewController::Instance().FetchSlowDataFor(file);\n+         if (file != mLastCursorItem)\n+           SetHeaderInfo(file, getHeaderGames(file-\u003eName()));\n+       }\n+       else if (isFolder)\n+       {\n+         setRegions(nullptr); // No region for folders\n+         MoveToFadeIn(getFolderComponents());\n+         MoveToFadeOut(getGameComponents());\n+\n+         if (file != mLastCursorItem)\n+           ViewController::Instance().FetchSlowDataFor(file);\n        }\n        else\n        {\n@@ -427,7 +438,7 @@ void DetailedGameListView::DoUpdateGameInformation(bool update)\n   {\n     if (file-\u003eIsGame())\n       ViewController::Instance().FetchSlowDataFor(file);\n-    else if (file-\u003eIsFolder()) // Kill video on multi-thumbnail folder\n+    else if (file-\u003eIsFolder() || file-\u003eIsHeader()) // Kill video on multi-thumbnail folder\n       mVideo.setVideo(Path::Empty);\n   }\n \n@@ -435,6 +446,25 @@ void DetailedGameListView::DoUpdateGameInformation(bool update)\n   mLastCursorItem = file;\n }\n \n+FileData::List DetailedGameListView::getHeaderGames(const String\u0026 name)\n+{\n+  FileData::List children;\n+  String lastHeader;\n+  for (auto\u0026 fileData : mList.getObjectsArray())\n+  {\n+    if (fileData-\u003eIsHeader())\n+    {\n+      lastHeader = fileData-\u003eName();\n+      continue;\n+    }\n+\n+    if (lastHeader == name)\n+      children.Add(fileData);\n+  }\n+\n+  return children;\n+}\n+\n Array\u003cThemableComponent*\u003e DetailedGameListView::getFolderComponents()\n {\n   Array\u003cThemableComponent*\u003e comps;\n@@ -481,6 +511,26 @@ void DetailedGameListView::SetFolderInfo(FolderData* folder, int count, const Fo\n     mFolderContent[i]-\u003esetImage(path[i]);\n }\n \n+void DetailedGameListView::SetHeaderInfo(FileData* header, const FileData::List\u0026 games)\n+{\n+  String gameCount(_N(\"%i GAME AVAILABLE\", \"%i GAMES AVAILABLE\", games.Count()));\n+  gameCount.Replace(\"%i\", String(games.Count()));\n+  mFolderName.setText(header-\u003eName() + \" - \" + gameCount);\n+\n+  int i = 0;\n+  HashSet\u003cPath\u003e dups;\n+  for (const FileData* game : games)\n+    if (Path p(game-\u003eThumbnailOrImagePath()); !p.IsEmpty() \u0026\u0026 !dups.contains(p))\n+    {\n+      dups.insert(p);\n+      mFolderContent[i]-\u003esetImage(p);\n+      if (++i == sFoldersMaxGameImageCount) break;\n+    }\n+\n+  while(i \u003c sFoldersMaxGameImageCount)\n+    mFolderContent[i++]-\u003esetImage(nullptr);\n+}\n+\n void DetailedGameListView::SetImageFading(FileData* game, bool videoStillRunning)\n {\n   if (videoStillRunning)\n@@ -850,8 +900,6 @@ void DetailedGameListView::OverlayApply(const Transform4x4f\u0026 parentTrans, const\n       }\n       case FileSorts::Sorts::DeveloperAscending:\n       case FileSorts::Sorts::DeveloperDescending:\n-      case FileSorts::Sorts::AliasAscending:\n-      case FileSorts::Sorts::AliasDescending:\n       case FileSorts::Sorts::PublisherAscending:\n       case FileSorts::Sorts::PublisherDescending: break;\n       case FileSorts::Sorts::GenreAscending:\n@@ -919,8 +967,6 @@ float DetailedGameListView::OverlayGetLeftOffset(FileData* const\u0026 data, int labe\n       case FileSorts::Sorts::SystemDescending:\n       case FileSorts::Sorts::DeveloperAscending:\n       case FileSorts::Sorts::DeveloperDescending:\n-      case FileSorts::Sorts::AliasAscending:\n-      case FileSorts::Sorts::AliasDescending:\n       case FileSorts::Sorts::PublisherAscending:\n       case FileSorts::Sorts::PublisherDescending:\n       case FileSorts::Sorts::PlayCountAscending:\n@@ -1078,7 +1124,7 @@ String DetailedGameListView::getItemIcon(const FileData\u0026 item)\n \n String DetailedGameListView::GetRawDisplayName(const FileData\u0026 game)\n {\n-  return mConf.GetDisplayByFileName() ? game.Metadata().RomFileOnly().ToString() : game.Name();\n+  return mConf.GetDisplayByFileName() ? game.Metadata().RomFileOnly().FilenameWithoutExtension() : game.Name();\n }\n \n String DetailedGameListView::GetDisplayName(FileData\u0026 game)\n@@ -1128,31 +1174,8 @@ void DetailedGameListView::populateList(const FolderData\u0026 folder)\n   FileSorts::Sorts sort = mSystem.IsSelfSorted() ? mSystem.FixedSort() :\n                           FileSorts::Clamp(RecalboxConf::Instance().GetSystemSort(mSystem), set);\n   FileSorts\u0026 sorts = FileSorts::Instance();\n-  mSort = sort;\n-\n-  // loop twice for set HasOtherVersions flag\n-  // use for sort by alias. if alone sort by name, otherwise sort by alias\n-  Regions::GameRegions aliasPreferredRegion = Regions::Clamp(RecalboxConf::Instance().GetSystemAliasPreferredRegion(mSystem));\n-  String confWantedAliasRegion = aliasPreferredRegion == Regions::GameRegions::Unknown ? \"ss\" : Regions::SerializeRegion(aliasPreferredRegion);\n-\n-  if (IsSortByAlias())\n-  {\n-    mGamesByAlias.clear();\n-    for (FileData* item: items)\n-    {\n-      const String alias = item-\u003eMetadata().AliasOrName(confWantedAliasRegion);\n-      mGamesByAlias[alias].Add(item);\n-    }\n-\n-    for (FileData* item: items)\n-    {\n-      const String alias = item-\u003eMetadata().AliasOrName(confWantedAliasRegion);\n-      item-\u003eSetHasOtherVersions(mGamesByAlias[alias].Count() \u003e 1);\n-      item-\u003eSetWantedAliasRegion(confWantedAliasRegion);\n-    }\n-  }\n-\n   FolderData::Sort(items, sorts.ComparerFromSort(sort), sorts.IsAscending(sort));\n+  mSort = sort;\n \n   // Region filtering?\n   Regions::GameRegions currentRegion = Regions::Clamp(RecalboxConf::Instance().GetSystemRegionFilter(mSystem));\n@@ -1183,7 +1206,7 @@ void DetailedGameListView::populateList(const FolderData\u0026 folder)\n   HeaderData* lastHeader = nullptr;\n \n   bool hasTopFavorites = false;\n-  if (RecalboxConf::Instance().GetFavoritesFirst())\n+  if (!IsFavoriteSystem() \u0026\u0026 RecalboxConf::Instance().GetFavoritesFirst())\n   {\n     // Has any favorite?\n     for(int t = items.Count() - 1, i = (items.Count() + 1) / 2; --i \u003e= 0; )\n@@ -1205,16 +1228,6 @@ void DetailedGameListView::populateList(const FolderData\u0026 folder)\n     }\n   }\n \n-  if (IsSortByAlias())\n-  {\n-    mGamesByAlias.clear();\n-    for (FileData* item: items)\n-    {\n-      const String alias = item-\u003eMetadata().AliasOrName(confWantedAliasRegion);\n-      mGamesByAlias[alias].Add(item);\n-    }\n-  }\n-\n   for (FileData* item : items)\n   {\n     // Region filtering?\n@@ -1226,56 +1239,16 @@ void DetailedGameListView::populateList(const FolderData\u0026 folder)\n     if (onlyTate \u0026\u0026 !RotationUtils::IsTate(item-\u003eMetadata().Rotation())) continue;\n     // Yoko filtering\n     if (onlyYoko \u0026\u0026 RotationUtils::IsTate(item-\u003eMetadata().Rotation())) continue;\n-\n-    if (!IsSortByAlias())\n-    {\n-      // Header?\n-      if (item-\u003eIsGame())\n-        if (HeaderData* header = NeedHeader(previous, item, hasTopFavorites); header != nullptr)\n-        {\n-          mList.add(header-\u003eName(leftIcon), header, GameColor, HeaderColor, headerAlignment);\n-          lastHeader = header;\n-        }\n-      // Store\n-      if (lastHeader == nullptr || !lastHeader-\u003eIsFolded())\n-        mList.add(GetDisplayName(*item), item, colorIndexOffset + (item-\u003eIsFolder() ? FolderColor : GameColor), false);\n-    }\n-    else {\n-      // Header?\n-      if (item-\u003eIsGame())\n-        if (HeaderData* header = NeedHeader(previous, item, hasTopFavorites); header != nullptr)\n-        {\n-          if (header-\u003eIsAlias())\n-          {\n-            if (header-\u003eIsFolded())\n-              mList.add(header-\u003eName(true), header, GameColor, HeaderColor, HorizontalAlignment::Left);\n-            else\n-              mList.add(header-\u003eName(true), header, GameColor, HeaderColor, HorizontalAlignment::Left);\n-          }\n-          // favorite OR in aplhabetic order\n-          else\n-            mList.add(header-\u003eName(leftIcon), header, GameColor, HeaderColor, headerAlignment);\n-          lastHeader = header;\n-        }\n-      // Store\n-      if (lastHeader == nullptr || mGamesByAlias[item-\u003eMetadata().AliasOrName(confWantedAliasRegion)].Count() \u003c 2)\n-        mList.add(GetDisplayName(*item), item, colorIndexOffset + (item-\u003eIsFolder() ? FolderColor : GameColor), false);\n-      else if (lastHeader != nullptr \u0026\u0026 !lastHeader-\u003eIsFolded())\n+    // Header?\n+    if (item-\u003eIsGame())\n+      if (HeaderData* header = NeedHeader(previous, item, hasTopFavorites); header != nullptr)\n       {\n-        if (lastHeader-\u003eIsAlias())\n-        {\n-\n-          mList.add(\"  \\u2022 \" + GetDisplayName(*item), item,\n-                    colorIndexOffset + (item-\u003eIsFolder() ? FolderColor : GameColor), false);\n-        }\n-        else\n-        {\n-          mList.add(GetDisplayName(*item), item, colorIndexOffset + (item-\u003eIsFolder() ? FolderColor : GameColor),\n-                    false);\n-        }\n+        mList.add(header-\u003eName(leftIcon), header, GameColor, HeaderColor, headerAlignment);\n+        lastHeader = header;\n       }\n-    }\n-\n+    // Store\n+    if (lastHeader == nullptr || !lastHeader-\u003eIsFolded())\n+      mList.add(GetDisplayName(*item), item, colorIndexOffset + (item-\u003eIsFolder() ? FolderColor : GameColor), false);\n     if (item-\u003eIsGame())\n       previous = item;\n   }\n@@ -1318,15 +1291,6 @@ void DetailedGameListView::setCursor(FileData* cursor)\n {\n   if(!mList.setCursor(cursor, 0))\n   {\n-\n-    // force unfold header is sort by alias\n-    if (IsSortByAlias())\n-    {\n-      Regions::GameRegions aliasPreferredRegion = Regions::Clamp(RecalboxConf::Instance().GetSystemAliasPreferredRegion(mSystem));\n-      String confWantedAliasRegion = aliasPreferredRegion == Regions::GameRegions::Unknown ? \"ss\" : Regions::SerializeRegion(aliasPreferredRegion);\n-      GetHeader(cursor-\u003eMetadata().AliasOrName(confWantedAliasRegion))-\u003eSetFolded(false);\n-    }\n-\n     populateList(mSystem.MasterRoot());\n     mList.setCursor(cursor);\n \n@@ -1613,32 +1577,6 @@ HeaderData* DetailedGameListView::NeedHeader(FileData* previous, FileData* next,\n       }\n       break;\n     }\n-    case FileSorts::Sorts::AliasAscending:\n-    case FileSorts::Sorts::AliasDescending:\n-    {\n-\n-      if (hasTopFavorites)\n-      {\n-        // Leavinf favorite area\n-        if (previous != nullptr \u0026\u0026 previous-\u003eMetadata().Favorite() \u0026\u0026 !next-\u003eMetadata().Favorite())\n-          return GetHeader(_(\"In alphabetical order\"));\n-          // List has favorites but not at top\n-        if (previous == nullptr)\n-          return GetHeader(_(\"In alphabetical order\"));\n-      }\n-\n-      String prevString = previous != nullptr ? previous-\u003eMetadata().AliasOrName(previous-\u003eGetWantedAliasRegion()).Trim().ToLowerCase() : \"\\t\";\n-      String nextString = next-\u003eMetadata().AliasOrName(next-\u003eGetWantedAliasRegion()).Trim().ToLowerCase();\n-\n-      if (prevString != nextString \u0026\u0026 mGamesByAlias[next-\u003eMetadata().AliasOrName(next-\u003eGetWantedAliasRegion())].Count() \u003e 1)\n-      {\n-        String alias(next-\u003eMetadata().AliasOrName(next-\u003eGetWantedAliasRegion()));\n-        if (alias.empty()) alias = _(\"Unknown alias\");\n-\n-        return GetAliasHeader(alias);\n-      }\n-      break;\n-    }\n     case FileSorts::Sorts::PublisherAscending:\n     case FileSorts::Sorts::PublisherDescending:\n     {\n@@ -1691,22 +1629,12 @@ HeaderData* DetailedGameListView::NeedHeader(FileData* previous, FileData* next,\n \n HeaderData* DetailedGameListView::GetHeader(const String\u0026 name)\n {\n-\n-\n   HeaderData** header = mHeaderMap.try_get(name);\n   if (header != nullptr) return *header;\n \n   return mHeaderMap[name] = new HeaderData(name, mSystem);\n }\n \n-HeaderData* DetailedGameListView::GetAliasHeader(const String\u0026 name)\n-{\n-  HeaderData** header = mHeaderMap.try_get(name);\n-  if (header != nullptr) return *header;\n-\n-  return mHeaderMap[name] = new HeaderData(name, mSystem, true, true);\n-}\n-\n HeaderData* DetailedGameListView::GetHeader(const String\u0026 name, int data)\n {\n   HeaderData** header = mHeaderMap.try_get(name);\n@@ -1926,8 +1854,6 @@ void DetailedGameListView::ReturnedFromGame(FileData* game)\n     case FileSorts::Sorts::PlayersDescending:\n     case FileSorts::Sorts::DeveloperAscending:\n     case FileSorts::Sorts::DeveloperDescending:\n-    case FileSorts::Sorts::AliasAscending:\n-    case FileSorts::Sorts::AliasDescending:\n     case FileSorts::Sorts::PublisherAscending:\n     case FileSorts::Sorts::PublisherDescending:\n     case FileSorts::Sorts::GenreAscending:\n@@ -1946,40 +1872,3 @@ void DetailedGameListView::RemoveGame(FileData\u0026 game)\n   if (mList.remove(\u0026game))\n     ListRefreshRequired();\n }\n-\n-bool DetailedGameListView::IsSortByAlias()\n-{\n-  switch (mSort)\n-  {\n-    case FileSorts::Sorts::AliasAscending:\n-    case FileSorts::Sorts::AliasDescending:\n-      return true;\n-    case FileSorts::Sorts::PlayCountAscending:\n-    case FileSorts::Sorts::PlayCountDescending:\n-    case FileSorts::Sorts::TotalPlayTimeAscending:\n-    case FileSorts::Sorts::TotalPlayTimeDescending:\n-    case FileSorts::Sorts::LastPlayedAscending:\n-    case FileSorts::Sorts::LastPlayedDescending:\n-    case FileSorts::Sorts::FileNameAscending:\n-    case FileSorts::Sorts::FileNameDescending:\n-    case FileSorts::Sorts::SystemAscending:\n-    case FileSorts::Sorts::SystemDescending:\n-    case FileSorts::Sorts::RatingAscending:\n-    case FileSorts::Sorts::RatingDescending:\n-    case FileSorts::Sorts::PlayersAscending:\n-    case FileSorts::Sorts::PlayersDescending:\n-    case FileSorts::Sorts::DeveloperAscending:\n-    case FileSorts::Sorts::DeveloperDescending:\n-    case FileSorts::Sorts::PublisherAscending:\n-    case FileSorts::Sorts::PublisherDescending:\n-    case FileSorts::Sorts::GenreAscending:\n-    case FileSorts::Sorts::GenreDescending:\n-    case FileSorts::Sorts::ReleaseDateAscending:\n-    case FileSorts::Sorts::ReleaseDateDescending:\n-    case FileSorts::Sorts::RegionAscending:\n-    case FileSorts::Sorts::RegionDescending:\n-    default: break;\n-  }\n-\n-  return false;\n-}\n\\ No newline at end of file\n",
    "new_path": "projects/frontend/es-app/src/views/gamelist/DetailedGameListView.cpp",
    "old_path": "projects/frontend/es-app/src/views/gamelist/DetailedGameListView.cpp",
    "a_mode": "100755",
    "b_mode": "100755",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -20,7 +20,6 @@ class DetailedGameListView : public ISimpleGameListView\n                            , private RecalboxConf::ISystemGamelistDecorationNotification\n                            , private RecalboxConf::ISystemSortNotification\n                            , private RecalboxConf::ISystemRegionFilterNotification\n-                           , private RecalboxConf::ISystemAliasPreferredRegionNotification\n                            , private RecalboxConf::ISystemFlatFoldersNotification\n                            , private RecalboxConf::IShowOnlyLatestVersionNotification\n                            , private RecalboxConf::IFavoritesOnlyNotification\n@@ -237,8 +236,6 @@ class DetailedGameListView : public ISimpleGameListView\n     //! Current sort\n     FileSorts::Sorts mSort;\n \n-    HashMap\u003cString, FileData::List\u003e mGamesByAlias;\n-\n     //! Current gamelist decorations\n     RecalboxConf::GamelistDecoration mDecorations;\n \n@@ -348,6 +345,7 @@ class DetailedGameListView : public ISimpleGameListView\n     }\n \n     FileData* getEmptyListItem() override { return \u0026mEmptyListItem; }\n+    FileData::List getHeaderGames(const String\u0026 name);\n \n     Array\u003cThemableComponent*\u003e getFolderComponents();\n     Array\u003cThemableComponent*\u003e getGameComponents(bool includeMainComponents = true);\n@@ -385,6 +383,8 @@ class DetailedGameListView : public ISimpleGameListView\n      */\n     void SetFolderInfo(FolderData* folder, int count, const FolderImagesPath\u0026 path);\n \n+    void SetHeaderInfo(FileData* header, const FileData::List\u0026 games);\n+\n     /*!\n      * @brief Check if the game has P2k\n      * @return\n@@ -431,15 +431,6 @@ class DetailedGameListView : public ISimpleGameListView\n      */\n     HeaderData* GetHeader(const String\u0026 name);\n \n-    /*!\n- * @brief Create or get a named header\n- * @param name Header name\n- * @param folded Header folded\n- * @return HeaderData instance\n- */\n-\n-    HeaderData* GetAliasHeader(const String\u0026 name);\n-\n     /*!\n      * @brief Create or get a named header\n      * @param name Header name\n@@ -573,12 +564,6 @@ class DetailedGameListView : public ISimpleGameListView\n \n     void ConfigurationSystemRegionFilterChanged(const SystemData\u0026 system, const Regions::GameRegions\u0026 state) final { (void)state; RefreshRequiredIfSelf(system); }\n \n-    /*\n-    * RecalboxConf::SystemAliasPreferredRegion implementation\n-    */\n-\n-    void ConfigurationSystemAliasPreferredRegionChanged(const SystemData\u0026 system, const Regions::GameRegions\u0026 state) final { (void)state; RefreshRequiredIfSelf(system); }\n-\n     /*\n      * RecalboxConf::SystemFlatFoldersNotify implementation\n      */\n@@ -650,6 +635,4 @@ class DetailedGameListView : public ISimpleGameListView\n      */\n \n     void ConfigurationHideNoGamesChanged(const bool\u0026 value) final { (void)value; ListRefreshRequired(); }\n-\n-    bool IsSortByAlias();\n };\n",
    "new_path": "projects/frontend/es-app/src/views/gamelist/DetailedGameListView.h",
    "old_path": "projects/frontend/es-app/src/views/gamelist/DetailedGameListView.h",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -24,16 +24,6 @@ class HeaderData : public FileData\n     {\n     }\n \n-    //!  Constructor\n-    HeaderData(const String\u0026 name, SystemData\u0026 system, bool folded, bool isAlias)\n-      : FileData(ItemType::Header, Path::Empty, system.MasterRoot())\n-      , mName(name)\n-      , mInt(0)\n-      , mFloat(0.f)\n-      , mFolded(folded)\n-      , mIsAlias(isAlias)\n-    {\n-    }\n     //! Constructor\n     HeaderData(const String\u0026 name, SystemData\u0026 system, int idata, float fdata)\n       : FileData(ItemType::Header, Path::Empty, system.MasterRoot())\n@@ -63,10 +53,6 @@ class HeaderData : public FileData\n \n     //! Fold status\n     [[nodiscard]] bool IsFolded() const { return mFolded; }\n-\n-    //! IsAlias status\n-    [[nodiscard]] bool IsAlias() const { return mIsAlias; }\n-\n     //! Set fold/unfold\n     void SetFolded(bool folded) { mFolded = folded; }\n     //! Toggle folded state\n@@ -86,9 +72,5 @@ class HeaderData : public FileData\n     float mFloat;\n     //! Fold status\n     bool mFolded;\n-\n-    //! is alias\n-    bool mIsAlias = false;\n-\n     using FileData::Metadata;\n };\n",
    "new_path": "projects/frontend/es-app/src/views/gamelist/HeaderData.h",
    "old_path": "projects/frontend/es-app/src/views/gamelist/HeaderData.h",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -248,16 +248,15 @@ class ISimpleGameListView : public Gui\n      */\n     void ListRefreshed() { mListRefreshRequired = false; }\n \n+    //! Is this the favorite gamelist?\n+    bool IsFavoriteSystem() { return mSystem.IsFavorite(); }\n+\n   private:\n     //! Is list moving vertically?\n     bool mVerticalMove;\n     //! List need list refresh ?\n     bool mListRefreshRequired;\n \n-    //! Is this the favorite gamelist?\n-    bool IsFavoriteSystem() { return mSystem.IsFavorite(); }\n-\n-\n     /*\n      * IQuickJump§Tracker implementation\n      */\n",
    "new_path": "projects/frontend/es-app/src/views/gamelist/ISimpleGameListView.h",
    "old_path": "projects/frontend/es-app/src/views/gamelist/ISimpleGameListView.h",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -469,7 +469,7 @@ bool ViewController::CheckBios(const EmulatorData\u0026 emulator)\n   {\n     mCheckFlags |= LaunchCheckFlags::Bios;\n     const BiosList\u0026 biosList = BiosManager::Instance().SystemBios(mGameToLaunch-\u003eSystem().Name());\n-    if (biosList.HasBiosKoFor(emulator.Emulator(), emulator.Core()) != 0)\n+    if (biosList.HasBiosKoFor(emulator.Emulator(), emulator.Core()))\n     {\n       // Build emulator name\n       String emulatorString = emulator.Emulator();\n@@ -663,7 +663,7 @@ bool ViewController::CheckSoftPatching(const EmulatorData\u0026 emulator)\n             mGameLinkedData.ConfigurablePatch().SetPatchPath(lastPatchPath);\n             break;\n           }\n-          else if (lastPatchPath.Filename() == \"original\")\n+          if (lastPatchPath.Filename() == \"original\")\n           {\n             mGameLinkedData.ConfigurablePatch().SetDisabledSoftPatching(true);\n             break;\n@@ -1155,11 +1155,12 @@ void ViewController::Run()\n       else if (item-\u003eIsFolder())\n       {\n         FolderData* folder = (FolderData*)item;\n-        int count = folder-\u003eCountAll(false, folder-\u003eSystem().Excludes());\n+        int count = folder-\u003eCountAll(true, folder-\u003eSystem().Excludes());\n \n         class Filter : public IFilter\n         {\n           private:\n+            HashSet\u003cPath\u003e mDups;\n             Path mPath[sFoldersMaxGameImageCount];\n             int mCount;\n \n@@ -1170,7 +1171,11 @@ void ViewController::Run()\n             {\n               if (mCount \u003c sFoldersMaxGameImageCount)\n                 if (file.HasThumbnailOrImage())\n-                  mPath[mCount++] = file.ThumbnailOrImagePath();\n+                  if (Path p(file.ThumbnailOrImagePath()); !mDups.contains(p))\n+                  {\n+                    mDups.insert(p);\n+                    mPath[mCount++] = p;\n+                  }\n               return false;\n             }\n \n",
    "new_path": "projects/frontend/es-app/src/views/ViewController.cpp",
    "old_path": "projects/frontend/es-app/src/views/ViewController.cpp",
    "a_mode": "100755",
    "b_mode": "100755",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -268,7 +268,6 @@ DefineEmulationStationSystemGetterSetterImplementation(FilterAdult, bool, Bool,\n DefineEmulationStationSystemGetterSetterImplementation(FlatFolders, bool, Bool, sSystemFlatFolders, false)\n DefineEmulationStationSystemGetterSetterNumericEnumImplementation(Sort, FileSorts::Sorts, sSystemSort, FileSorts::Sorts::FileNameAscending)\n DefineEmulationStationSystemGetterSetterNumericEnumImplementation(RegionFilter, Regions::GameRegions, sSystemRegionFilter, Regions::GameRegions::Unknown)\n-DefineEmulationStationSystemGetterSetterNumericEnumImplementation(AliasPreferredRegion, Regions::GameRegions, sSystemAliasPreferredRegion, Regions::GameRegions::Unknown)\n \n DefineEmulationStationSystemListGetterSetterImplementation(ArcadeSystemHiddenManufacturers, sArcadeSystemHiddenManufacturers, \"\")\n \n",
    "new_path": "projects/frontend/es-core/src/RecalboxConf.cpp",
    "old_path": "projects/frontend/es-core/src/RecalboxConf.cpp",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  },
  {
    "diff": "@@ -448,7 +448,6 @@ class RecalboxConf: public IniFile, public StaticLifeCycleControler\u003cRecalboxConf\n     DefineEmulationStationSystemGetterSetterDeclaration(FlatFolders, bool, Bool, sSystemFlatFolders)\n     DefineEmulationStationSystemGetterSetterNumericEnumDeclaration(Sort, FileSorts::Sorts)\n     DefineEmulationStationSystemGetterSetterNumericEnumDeclaration(RegionFilter, Regions::GameRegions)\n-    DefineEmulationStationSystemGetterSetterNumericEnumDeclaration(AliasPreferredRegion, Regions::GameRegions)\n \n     #undef DefineGetterSetter\n     #undef DefineListGetterSetter\n@@ -477,7 +476,6 @@ class RecalboxConf: public IniFile, public StaticLifeCycleControler\u003cRecalboxConf\n     static constexpr const char* sSystemFilterAdult          = \"filteradultgames\";\n     static constexpr const char* sDisplayByFileName          = \"displaybyfilename\";\n     static constexpr const char* sSystemRegionFilter         = \"regionfilter\";\n-    static constexpr const char* sSystemAliasPreferredRegion = \"aliaspreferredregion\";\n     static constexpr const char* sSystemFlatFolders          = \"flatfolders\";\n     static constexpr const char* sSystemSort                 = \"sort\";\n     static constexpr const char* sSystemDemoInclude          = \"demo.include\";\n",
    "new_path": "projects/frontend/es-core/src/RecalboxConf.h",
    "old_path": "projects/frontend/es-core/src/RecalboxConf.h",
    "a_mode": "100644",
    "b_mode": "100644",
    "new_file": false,
    "renamed_file": false,
    "deleted_file": false,
    "generated_file": false
  }
]
